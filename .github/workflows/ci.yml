name: Selah-API CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 65432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore Schema Migration dependencies
        run: dotnet restore ./utilities/DbMigrationUtility

      - name: Build Migration Project
        run: dotnet build ./utilities/DbMigrationUtility --no-restore

      - name: Run Schema Migrations
        env:
          DB_CONNECTION_STRING: User ID=postgres;Password=postgres;Host=localhost;Port=65432;Database=postgres
        run: dotnet run --project . -- test
        working-directory: utilities/DbMigrationUtility/DbMigrationUtility

      - name: Restore dependencies
        run: dotnet restore Selah.sln

      - name: Build
        run: dotnet build Selah.sln --no-restore

      - name: Run Tests
        env:
          DB_CONNECTION_STRING: User ID=postgres;Password=postgres;Host=localhost;Port=65432;Database=postgres
        run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"

      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@v5.4.3
        with:
          reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
          targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
          reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: "Code Coverage" # Optional title.
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.
      - name: Upload Combined Coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/Cobertura.xml
          retention-days: 5

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
      - name: Upload Test Result Files
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/**/TestResults/**/*
          retention-days: 5

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.16.1
        if: always()
        with:
          trx_files: "${{ github.workspace }}/**/*.trx"

      # - name: Add Coverage PR Comment
      #  uses: marocchino/sticky-pull-request-comment@v2
      #  with:
      #    recreate: true
      #   path: code-coverage-results.md

      #- name: Configure AWS credentials
      # uses: aws-actions/configure-aws-credentials@v1
      # with:
      #    aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      #    aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #    aws-region: us-east-1

      #- name: Login to Amazon ECR
      #  id: login-ecr
      #  uses: aws-actions/amazon-ecr-login@v1

      # - name: "Build, tag, and push image to Amazon ECR"
      #   env:
      #    ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
      #    ECR_REPOSITORY: selah-api-production
      #    IMAGE_TAG: selah_api_latest
      #  run: |
      #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
